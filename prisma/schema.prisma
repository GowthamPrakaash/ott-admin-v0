// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  username      String         @unique
  password      String
  createdAt     DateTime       @default(now())
  accounts      Account[]
  sessions      Session[]
  emailVerified DateTime?
  WatchHistory  WatchHistory[]
}

model Genre {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  movies      Movie[]  @relation("MovieGenres")
  series      Series[] @relation("SeriesGenres")
}

model Movie {
  id               String         @id @default(uuid())
  title            String
  description      String
  meta_title       String?
  meta_description String?
  duration         Int
  release_year     Int
  video_id         String
  poster_url       String
  status           String
  createdAt        DateTime       @default(now())
  subtitles        Json?
  genres           Genre[]        @relation("MovieGenres")
  WatchHistory     WatchHistory[]
}

model Series {
  id               String         @id @default(uuid())
  title            String
  description      String
  meta_title       String?
  meta_description String?
  release_year     Int
  poster_url       String
  status           String
  createdAt        DateTime       @default(now())
  episodes         Episode[]
  genres           Genre[]        @relation("SeriesGenres")
  WatchHistory     WatchHistory[]
}

model Episode {
  id               String         @id @default(uuid())
  series           Series         @relation(fields: [series_id], references: [id])
  series_id        String
  title            String
  description      String
  meta_title       String?
  meta_description String?
  season_number    Int
  episode_number   Int
  duration         Int
  video_id         String
  poster_url       String
  status           String
  release_date     DateTime
  createdAt        DateTime       @default(now())
  subtitles        Json?
  WatchHistory     WatchHistory[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  disabled   Boolean  @default(false)
}

model ManagedRole {
  id        String   @id @default(uuid())
  email     String   @unique
  role      String // 'admin' or 'editor'
  createdAt DateTime @default(now())
}

model WatchHistory {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  movie     Movie?   @relation(fields: [movieId], references: [id])
  movieId   String?
  series    Series?  @relation(fields: [seriesId], references: [id])
  seriesId  String?
  episode   Episode? @relation(fields: [episodeId], references: [id])
  episodeId String?
  watchedAt DateTime @default(now())

  @@index([userId, watchedAt])
}
